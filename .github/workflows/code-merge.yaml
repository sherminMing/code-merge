name: Code Merge
on:
  workflow_dispatch:



jobs:
  generate-version-number:
    name: Generate Version Number
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Write Version to File
        run: |
          echo "v$(date "+%Y%m%d%H%M%S")" > version.txt  

      - name: Upload Artifact
        id: upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: version-artifact
          path: "version.txt"

      - name: Get Artifact ID
        run: echo "Artifact ID is ${{ steps.upload-artifact.outputs.artifact_id }}"
        
      - name: Write Version to File
        run: |
          echo "${{ steps.upload-artifact.outputs.artifact_id }}" > artifact-id.txt  
          
      - name: Upload Artifact Id
        id: upload-artifact-id
        uses: actions/upload-artifact@v2
        with:
          name: artifact-id
          path: "artifact-id.txt"

  update-version:
    name: Increment Version in pom.xml
    runs-on: [ ubuntu-latest ]
    needs: generate-version-number
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: version-artifact

      - name: Read Version from File
        id: versionNumber
        run: |
          version=$(cat version.txt)  
          echo "The version of pom.xml is: $version"
          eval echo "version=$version >> $GITHUB_OUTPUT"
      - name: Set new version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ steps.versionNumber.outputs.version }} -DgenerateBackupPoms=false
      - name: Commit pom.xml
        run: |
          git config --global user.email "automationNoReply@ssnc.com"
          git config --global user.name "Github Automation"
          git add pom.xml
          git commit -m "Auto update version number in pom.xml"  
          git push origin HEAD  
          
  create-tag:
    name: Create Tag
    runs-on: [ ubuntu-latest ]
    needs: update-version
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: version-artifact

      - name: Read Version from File
        id: versionNumber
        run: |
          cd version-artifact  
          version=$(cat version.txt)  
          echo "The version of new tag is: $version"
          eval echo "version=$version >> $GITHUB_OUTPUT"

      - name: Create Git Tag
        id: create_tag
        run: |
          git config --global --add safe.directory "$(pwd)" 
          git config --global user.email "automationNoReply@ssnc.com"
          git config --global user.name "Github Automation"       
          git tag -a ${{ steps.versionNumber.outputs.version }} -m "Version ${{ steps.versionNumber.outputs.version }}"  
          git push origin ${{ steps.versionNumber.outputs.version}}
          
  merge-into-main:  
    name: Merge-into-main
    runs-on: ubuntu-latest  
    needs: create-tag
    steps:  
      - name: Checkout  
        uses: actions/checkout@v2  
        with:  
          fetch-depth: 0 
          
      - name: Merge into Main  
        run: |  
          # git checkout main  
          # git pull  
          # git merge --no-ff origin/$GITHUB_REF  
          # git push origin main  
          git checkout main
          git pull
          git checkout $GITHUB_REF
          git pull
          git checkout $GITHUB_REF
          git pull
          git merge $GITHUB_REF
          
  create-release:  
    name: Create Release  
    runs-on: ubuntu-latest 
    needs:  merge-into-main
    steps:  
      - name: Checkout code  
        uses: actions/checkout@v2  
        with:  
          fetch-depth: 0 
          
      - name: Download Artifact
        uses: actions/download-artifact@v1
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
        with:
          name: version-artifact

      - name: Read Version from File
        id: versionNumber
        run: |
          cd version-artifact  
          version=$(cat version.txt)  
          echo "The version of create tag is: $version"
          eval echo "version=$version >> $GITHUB_OUTPUT"          
          
      - name: Create Release  
        id: create_release  
        uses: actions/create-release@v1  
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}     
        with:  
          tag_name: ${{ steps.versionNumber.outputs.version }}
          release_name: ${{ steps.versionNumber.outputs.version }}
          body: |  
             Github Automation
          draft: false 
          prerelease: false 
          
