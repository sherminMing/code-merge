name: Wait for PR Merge  
on:  
  pull_request:  
    types: [closed]  
    branches:  
      - main  
  
jobs:  
  generate-version-number:
    name: Generate Version Number
    runs-on: [ uk-digital-k8s-self-hosted ]
    container:
      image: 732440210582.dkr.ecr.eu-west-1.amazonaws.com/library/openjdk:jdk21-maven-3-9-6
      credentials:
        username: AWS
        password: ${{ secrets.AWS_ECR_PASSWORD }}
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Write Version to File
        run: |
          echo "v$(date "+%Y%m%d%H%M%S")" > version.txt  

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: version-artifact
          path: "version.txt"

  create-tag:
    name: Create Tag
    runs-on: [ uk-digital-k8s-self-hosted ]
    needs: generate-version-number
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: version-artifact

      - name: Read Version from File
        id: versionNumber
        run: |
          cd version-artifact  
          version=$(cat version.txt)  
          echo "The version of new tag is: $version"
          eval echo "version=$version >> $GITHUB_OUTPUT"

      - name: Create Git Tag
        id: create_tag
        run: |
          git config --global --add safe.directory "$(pwd)" 
          git config --global user.email "automationNoReply@ssnc.com"
          git config --global user.name "Github Automation"       
          git tag -a ${{ steps.versionNumber.outputs.version }} -m "Version ${{ steps.versionNumber.outputs.version }}"  
          git push origin ${{ steps.versionNumber.outputs.version}}
          

  check-pr-status:  
    runs-on: ubuntu-latest  
    needs: create-tag
    if: github.event.pull_request.merged == true  
    steps:  
      - name: PR has been merged  
        run: |  
          echo "PR has been merged into main...."  
          
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download Artifact
        uses: actions/download-artifact@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: version-artifact

      - name: Read Version from File
        id: versionNumber
        run: |
          cd version-artifact  
          version=$(cat version.txt)  
          echo "The version of create tag is: $version"
          eval echo "version=$version >> $GITHUB_OUTPUT"          

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.versionNumber.outputs.version }}
          release_name: ${{ steps.versionNumber.outputs.version }}
          body: |
            Github Automation
          draft: false
          prerelease: false         
